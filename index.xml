<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chen Tong</title>
    <link>https://cixuuz.github.io/index.xml</link>
    <description>Recent content on Chen Tong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://cixuuz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>leetcode summary 08/23</title>
      <link>https://cixuuz.github.io/post/lcs_0823/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0823/</guid>
      <description>

&lt;h1 id=&#34;337-house-robber-iii&#34;&gt;337. House Robber III&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;basic: for each node, you can choose rob or not, based on the parent&amp;rsquo;s status. return max amount of each choice.&lt;/li&gt;
&lt;li&gt;dp: keep previous rob information.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/9b100eab6e3f5915b5b8d30fbb81bb94.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;95-unique-binary-search-trees-ii&#34;&gt;95. Unique Binary Search Trees II&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;foreach 1 to n, generate left and right subtree and combine with current node.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/50b2b496c413d01111ba719e66159bdb.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;111-minimum-depth-of-binary-tree&#34;&gt;111. Minimum Depth of Binary Tree&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;its root to leaf, not to other node. For example (1, 2), the only path is 1-&amp;gt;2.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/922711cdaab7615d8c0d9f47b4bac4f8.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://cixuuz.github.io/post/resume/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>title</title>
      <link>https://cixuuz.github.io/post/java-pass-by-value/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-pass-by-value/</guid>
      <description>&lt;p&gt;java 传值还是引用
&lt;a href=&#34;https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value&#34;&gt;refer&lt;/a&gt;
Java is always pass-by-value. Unfortunately, they decided to call the location of an object a &amp;ldquo;reference&amp;rdquo;. When we pass the value of an object, we are passing the reference to it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>leetcode summary 08/22</title>
      <link>https://cixuuz.github.io/post/lcs_0822/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0822/</guid>
      <description>

&lt;h1 id=&#34;114-flatten-binary-tree-to-linked-list&#34;&gt;114. Flatten Binary Tree to Linked List&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iterative: set left tree to the right child, left child is null, then go to next right node.&lt;/li&gt;
&lt;li&gt;recursive: use post order get successor of each node, set successor to each node&amp;rsquo;r right child
&lt;script src=&#34;//gist.github.com/cixuuz/2a59c851a4f106fb5f985bac4d158dfb.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;199-binary-tree-right-side-view&#34;&gt;199. Binary Tree Right Side View&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iterative: BFS, always pop rightmost node. It&amp;rsquo;s better using queue, and loop N times. N is the size of queue.&lt;/li&gt;
&lt;li&gt;recursive: post order, and pop the first node with depth N&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/37838460dfdf970add184ef68dec5c96.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;230-kth-smallest-element-in-a-bst&#34;&gt;230. Kth Smallest Element in a BST&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;recursive: in order traverse with a counter&lt;/li&gt;
&lt;li&gt;iterative: use stack, first push current node, move to left, next do sth, then move to right;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/fed292dbf3384825b73b9bdc2698a28d.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;94-binary-tree-inorder-traversal&#34;&gt;94. Binary Tree Inorder Traversal&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iterative: always left first, then right&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/3927083fc3ec44bcb0c70c07ada06b09.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;144-binary-tree-preorder-traversal&#34;&gt;144. Binary Tree Preorder Traversal&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;iterative: always go down and up, so stack is best way to do&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/43c39efc9a0359076bda51319758c09d.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;145-binary-tree-postorder-traversal&#34;&gt;145. Binary Tree Postorder Traversal&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;just reverse of preorder
&lt;script src=&#34;//gist.github.com/cixuuz/1f6a9aee36b07cd889ee8ceb3bde7cd5.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Notes of Readings in Database Systems</title>
      <link>https://cixuuz.github.io/post/readings_in_database_systems/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/readings_in_database_systems/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.redbook.io/&#34;&gt;redbook&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;

&lt;p&gt;Background introduced by Michael Stonebraker
Traditional RDBMS Systems introduced by Michael Stonebraker
Techniques Everyone Should Know introduced by Peter Bailis
New DBMS Architectures introduced by Michael Stonebraker [HTML] [PDF]
Large-Scale Dataflow Engines introduced by Peter Bailis [HTML] [PDF]
Weak Isolation and Distribution introduced by Peter Bailis [HTML] [PDF]
Query Optimization introduced by Joe Hellerstein [HTML] [PDF]
Interactive Analytics introduced by Joe Hellerstein [HTML] [PDF]
Languages introduced by Joe Hellerstein [HTML] [PDF]
Web Data introduced by Peter Bailis [HTML] [PDF]
A Biased Take on a Moving Target: Complex Analytics
by Michael Stonebraker [HTML] [PDF]
A Biased Take on a Moving Target: Data Integration
by Michael Stonebraker&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python Numpy</title>
      <link>https://cixuuz.github.io/post/python-numpy/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/python-numpy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Numpy 中, 创建 2D Array 的默认方式是 &amp;ldquo;C-type&amp;rdquo; 以 row 为主在内存中排列, 而如果是 &amp;ldquo;Fortran&amp;rdquo; 的方式创建的, 就是以 column 为主在内存中排列.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;col_major = np.zeros((10,10), order=&#39;C&#39;)    # C-type
row_major = np.zeros((10,10), order=&#39;F&#39;)    # Fortran
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;copy慢 view快 same as &lt;code&gt;np.flatten()&lt;/code&gt; return new copy 或者 &lt;code&gt;np.ravel()&lt;/code&gt; return new view&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>bigtable and leveldb</title>
      <link>https://cixuuz.github.io/post/database-bigtable-leveldb/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/database-bigtable-leveldb/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://draveness.me/bigtable-leveldb.html&#34;&gt;浅析 Bigtable 和 LevelDB 的实现&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka message format</title>
      <link>https://cixuuz.github.io/post/kafka-message-format/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/kafka-message-format/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.iteblog.com/archives/2232.html&#34;&gt;Apache Kafka消息格式&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kafka stream</title>
      <link>https://cixuuz.github.io/post/kafka-stream/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/kafka-stream/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jasongj.com/kafka/kafka_stream/&#34;&gt;kafka stream&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL 架构</title>
      <link>https://cixuuz.github.io/post/mysql-high-availability/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/mysql-high-availability/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0frrH09-zFjdFYZalatb8A&#34;&gt;refer&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;高可用架构&#34;&gt;高可用架构&lt;/h1&gt;

&lt;p&gt;MySQL高可用方面，目前业界主流依然是基于异步复制的技术，例如Keepalived、MHA、ZooKeeper等，要求数据强一致的场景逐步开始使用分布式协议，这方面的典型代表有PXC、Group Replication、TiDB。下面我们就重点来说说keepalived、MHA和PXC这几种大家用得比较多的架构。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;脑裂 （ 一种常见的脑裂情况可以描述如下）比如正常情况下，（集群中的）NodeA 和 NodeB 会通过心跳检测以确认对方存在，在通过心跳检测确认不到对方存在时，就接管对应的（共享） resource 。如果突然间，NodeA 和 NodeB 之间的心跳不存在了（如网络断开），而 NodeA 和 NodeB 事实上却都处于 Active 状态，此时 NodeA 要接管 NodeB 的 resource ，同时 NodeB 要接管 NodeA 的 resource ，这时就是脑裂（split-brain）。&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;双Master架构：非常成熟，使用很普遍，要注意延迟和数据的一致性。&lt;/li&gt;
&lt;li&gt;PXC: 分布式协议，数据强一致性，并发效率略低，可用性好&lt;/li&gt;
&lt;li&gt;MHA：各项指标介于M-M和PXC之间，性能无损失，适合读写分离架构。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;mysql-sharding拆分&#34;&gt;MySQL sharding拆分&lt;/h1&gt;

&lt;p&gt;分库(垂直),　分表(水平)的取舍&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>database index</title>
      <link>https://cixuuz.github.io/post/database-index/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/database-index/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.liuhongnan.com/2017/08/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95&amp;amp;&amp;amp;%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86&amp;amp;&amp;amp;%E7%AD%89%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB&#34;&gt;数据库索引与事务管理&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;b-tree&#34;&gt;B+ tree&lt;/h1&gt;

&lt;p&gt;B+树是n叉排序树&lt;/p&gt;

&lt;h1 id=&#34;hash-index&#34;&gt;hash index&lt;/h1&gt;

&lt;p&gt;MySQL: innoDB以及MyISAM引擎，均不支持Hash索引&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javascript es6</title>
      <link>https://cixuuz.github.io/post/js-es6/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/js-es6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.w3cvip.org/topics/47&#34;&gt;ES6&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = [];
for (let i = 0; i &amp;lt; 10; i++) {
a[i] = function () {
console.log(i);
};
}
a[6](); // 6
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;const用来声明常量。一旦声明，常量的值就不能改变。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const monent = require(&#39;moment&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;arrow function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Animal {
constructor(){
    this.type = &#39;animal&#39;
}
says(say){
    setTimeout( () =&amp;gt; {
        console.log(this.type + &#39; says &#39; + say)
    }, 1000)
}
}
var animal = new Animal()
animal.says(&#39;hi&#39;)  //animal says hi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>spark 内存管理</title>
      <link>https://cixuuz.github.io/post/spark-memory-management/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/spark-memory-management/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/999ef21dffe8&#34;&gt;Spark 内存管理的前世今生（上）&lt;/a&gt;
&lt;a href=&#34;http://www.jianshu.com/p/211505ae3fb3&#34;&gt;Spark 内存管理的前世今生（下）&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>statistical learning</title>
      <link>https://cixuuz.github.io/post/statistical-learning/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/statistical-learning/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com/in-depth-introduction-to-machine-learning-in-15-hours-of-expert-videos/&#34;&gt;Statistical Learning&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;supervised-learning&#34;&gt;Supervised Learning&lt;/h1&gt;

&lt;p&gt;Regression and classification is classified by its output types. Regression when we predict quantitative outputs, and clas- siﬁcation when we predict qualitative outputs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Least squares assumes f(x) is well approximated by a globally linear function.&lt;/li&gt;
&lt;li&gt;k-nearest neighbors assumes f(x) is well approximated by a locally constant function.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>lcs 08/15</title>
      <link>https://cixuuz.github.io/post/lcs_0815/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0815/</guid>
      <description>

&lt;h1 id=&#34;99-recover-binary-search-tree&#34;&gt;99. Recover Binary Search Tree&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;travese in order. The result should be sorted ascending. The misplaced larger element will be close to head, while the smaller one will be close to end. For example, 1 2 3 is the in order. But the wrong seq is like 3 2 1. Apparently, 3 &amp;gt; 2 so 3 is the first node. 2 &amp;gt; 1, so 1 is the second one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iterative solution using &lt;a href=&#34;http://www.cnblogs.com/AnnieKim/archive/2013/06/15/MorrisTraversal.html&#34;&gt;morris traverse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/b7fcdba6d90e6a5f509b9429268fba09.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;257-binary-tree-paths&#34;&gt;257. Binary Tree Paths&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;string is immutable.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/cixuuz/c172b271cf8a56cc1224320a497cec1a.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>