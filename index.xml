<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chen Tong</title>
    <link>https://cixuuz.github.io/</link>
    <description>Recent content on Chen Tong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cixuuz.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode summary 10/23</title>
      <link>https://cixuuz.github.io/post/lcs_1023/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1023/</guid>
      <description> 79. Word Search </description>
    </item>
    
    <item>
      <title>leetcode summary 10/22</title>
      <link>https://cixuuz.github.io/post/lcs_1022/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1022/</guid>
      <description> 598. Range Addition II  592. Fraction Addition and Subtraction  </description>
    </item>
    
    <item>
      <title>leetcode summary 10/19</title>
      <link>https://cixuuz.github.io/post/lcs_1019/</link>
      <pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1019/</guid>
      <description>42. Trapping Rain Water https://gist.github.com/cd4159bf4d1b5d31fa27f13062e1681b
322. Coin Change https://gist.github.com/e383d1c66294ddc044a77e1a8e3ca529
518. Coin Change 2 https://gist.github.com/f4408eb706be4b337494af0dd0e24c47</description>
    </item>
    
    <item>
      <title>System Design - Web Crawler</title>
      <link>https://cixuuz.github.io/post/system_design_web_crawler/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/system_design_web_crawler/</guid>
      <description>Guideline: The Crawler Service processes each page link by doing the following in a loop: 1. Takes the top ranked page link to crawl 2. Checks crawled_links in the NoSQL Database for an entry with a similar page signature 3. If we have a similar page, reduces the priority of the page link 1. This prevents us from getting into a cycle; Continue 2. Else, crawls the link - Adds a job to the Reverse Index Service queue to generate a reverse index - Adds a job to the Document Service queue to generate a static title and snippet - Generates the page signature - Removes the link from links_to_crawl in the NoSQL Database - Inserts the page link and signature to crawled_links in the NoSQL Database</description>
    </item>
    
    <item>
      <title>leetcode summary 10/17</title>
      <link>https://cixuuz.github.io/post/lcs_1017/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1017/</guid>
      <description>33. Search in Rotated Sorted Array https://leetcode.com/problems/search-in-rotated-sorted-array/discuss/ 
341. Flatten Nested List Iterator  generator, sepecific to this question stack, interative https://leetcode.com/problems/flatten-nested-list-iterator/discuss/  155. Min Stack https://discuss.leetcode.com/topic/7020/java-accepted-solution-using-one-stack</description>
    </item>
    
    <item>
      <title>leetcode summary 10/16</title>
      <link>https://cixuuz.github.io/post/lcs_1016/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1016/</guid>
      <description> 138. Copy List with Random Pointer  301. Remove Invalid Parentheses  </description>
    </item>
    
    <item>
      <title>leetcode summary 10/15</title>
      <link>https://cixuuz.github.io/post/lcs_1015/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1015/</guid>
      <description> 692. Top K Frequent Words  Python3 sorting using functools.total_ordering, implements eq and le   98. Validate Binary Search Tree  121. Best Time to Buy and Sell Stock  get min price before current price   122. Best Time to Buy and Sell Stock II  123. Best Time to Buy and Sell Stock III 188. Best Time to Buy and Sell Stock IV  309. Best Time to Buy and Sell Stock with Cooldown  </description>
    </item>
    
    <item>
      <title>leetcode summary 10/14</title>
      <link>https://cixuuz.github.io/post/lcs_1014/</link>
      <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1014/</guid>
      <description> 76. Minimum Window Substring  242. Valid Anagram  sort hashmap   139. Word Break  memo s[i:] dp   49. Group Anagrams  387. First Unique Character in a String  283. Move Zeroes  </description>
    </item>
    
    <item>
      <title>System Design - TinyURL</title>
      <link>https://cixuuz.github.io/post/system_design_tinyurl/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/system_design_tinyurl/</guid>
      <description>Two methods Hash Function Pros: - use traditional hash function - randomly distributed - support url clean - hash functions cost time
cons: - not short - collisions, start collisions from 2^(n/2). solution: url + timestamp
Auto-increment index Base10, Base62
Pros: - simple, good with rdb - can be short - no conflicts
cons: - not support url clean</description>
    </item>
    
    <item>
      <title>leetcode summary 10/12</title>
      <link>https://cixuuz.github.io/post/lcs_1012/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1012/</guid>
      <description> 56. Merge Intervals  sort then merge   </description>
    </item>
    
    <item>
      <title>leetcode summary 10/11</title>
      <link>https://cixuuz.github.io/post/lcs_1011/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1011/</guid>
      <description> 232. Implement Queue using Stacks  </description>
    </item>
    
    <item>
      <title>leetcode summary 10/10</title>
      <link>https://cixuuz.github.io/post/lcs_1010/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1010/</guid>
      <description> 53. Maximum Subarray  </description>
    </item>
    
    <item>
      <title>leetcode summary 10/09</title>
      <link>https://cixuuz.github.io/post/lcs_1009/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1009/</guid>
      <description> 500. Keyboard Row  566. Reshape the Matrix  </description>
    </item>
    
    <item>
      <title>leetcode summary 10/08</title>
      <link>https://cixuuz.github.io/post/lcs_1008/</link>
      <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1008/</guid>
      <description> 146. LRU Cache  LinkedHashMap OrderedDict   412. Fizz Buzz  </description>
    </item>
    
    <item>
      <title>Machine Learning Framework</title>
      <link>https://cixuuz.github.io/post/ml_framework/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ml_framework/</guid>
      <description>机器学习架构 https://mp.weixin.qq.com/s/eQ4CcqhGd070BYSQdonO5g
境界 1：参数可单机存储和更新
此种境界较为简单，但仍可以使用参数服务器，通过数据并行来加速模型的训练。
境界 2：参数不可单机存储，可以单机更新
此种情况对应的是一些简单模型，比如 sparse logistic regression；当 feature 的数量突破百亿的时候，LR 的权重参数不太可能在一台机器上完全存下，此时必须使用参数服务器架构对模型参数进行分片。但是注意一点，SGD 的更新公式：
其中可以分开到单个维度进行计算，但是单个维度的 wi=f(w)xi，这里的 f(w) 表示是全部参数 w 的一个函数，具体推导比较简单，这里篇幅所限就不赘述了。只是想说明 worker 在计算梯度的时候可能需要使用到上一轮迭代的所有参数。 而我们之所以对参数进行分片就是因为我们无法将所有参数存放到一台机器，现在单个 worker 有需要使用所有的参数才能计算某个参数分片的梯度，这不是矛盾吗？可能吗？ 答案是可能的，因为单个样本的 feature 具有很高的稀疏性（sparseness）。例如一个百亿 feature 的模型，单个训练样本往往只在其中很小一部分 feature 上有取值，其他都为 0（假设 feature 取值都已经离散化了）。因此计算 f(w) 的时候可以只拉取不为 0 的 feature 对应的那部分 w 即可。有文章统计，一般这个级别的系统，稀疏性往往在 0.1%（or 0.01%，记得不是很准，大致这样）以下。这样的稀疏性，可以让单机没有任何阻碍的计算 f(w)。 目前公司开源的 Angel 和 AILab 正在做的系统都处于这个境界。而原生 Spark 还没有达到这个境界，只能在中小规模的圈子里厮混。Angel 改造的基于 Angel 的 Spark 则达到了这个境界。
境界 3：参数不可单机存储，不可单机更新，但无需模型并行
境界 3 顺延境界 2 而来，当百亿级 feature 且 feature 比较稠密的时候，就需要计算框架进入到这层境界了，此时单个 worker 的能力有限，无法完整加载一个样本，也无法完整计算 f(w)。怎么办呢？其实很简单，学过线性代数的都知道，矩阵可以分块。向量是最简单的矩阵，自然可以切成一段一段的来计算。只是调度器需要支持算符分段而已了。</description>
    </item>
    
    <item>
      <title>leetcode summary 10/05</title>
      <link>https://cixuuz.github.io/post/lcs_1005/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1005/</guid>
      <description> 369. Plus One Linked List  reverse, add, reverse dfs return carry two points to the change part   </description>
    </item>
    
    <item>
      <title>leetcode summary 10/04</title>
      <link>https://cixuuz.github.io/post/lcs_1004/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_1004/</guid>
      <description> 163. Missing Ranges  overflow   </description>
    </item>
    
    <item>
      <title>Programming multithreading</title>
      <link>https://cixuuz.github.io/post/programming-multithreading/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/programming-multithreading/</guid>
      <description>Semaphores: It&amp;rsquo;s simply a way to limit the number of consumers for a specific resource. For example, to limit the number of simultaneous calls to a database in an application.</description>
    </item>
    
    <item>
      <title>leetcode summary 09/29</title>
      <link>https://cixuuz.github.io/post/lcs_0929/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0929/</guid>
      <description> 675. Cut Off Trees for Golf Event  heap and bfs   </description>
    </item>
    
    <item>
      <title>leetcode summary 09/28</title>
      <link>https://cixuuz.github.io/post/lcs_0928/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0928/</guid>
      <description> 153. Find Minimum in Rotated Sorted Array  bs   </description>
    </item>
    
    <item>
      <title>leetcode summary 09/27</title>
      <link>https://cixuuz.github.io/post/lcs_0927/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0927/</guid>
      <description> 451. Sort Characters By Frequency  bucket sort   </description>
    </item>
    
    <item>
      <title>feature engineer</title>
      <link>https://cixuuz.github.io/post/ds-feature-engineer/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ds-feature-engineer/</guid>
      <description> Onehot encoding One of k encoding on an array of lenght k
hash encoding label encoding  non-linear tree-based not increase dimensionality  count encoding target encoding encode categorical variables by their ratio of target
reducing dimensonality https://medium.com/towards-data-science/reducing-dimensionality-from-dimensionality-reduction-techniques-f658aec24dfe
 PCA t-SNE Auto Encoders  </description>
    </item>
    
    <item>
      <title>machine learning xgboost</title>
      <link>https://cixuuz.github.io/post/ml-xgboost/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ml-xgboost/</guid>
      <description></description>
    </item>
    
    <item>
      <title>leetcode summary 09/23</title>
      <link>https://cixuuz.github.io/post/lcs_0923/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0923/</guid>
      <description> 677. Map Sum Pairs  Trie   682. Baseball Game  </description>
    </item>
    
    <item>
      <title>interview ds</title>
      <link>https://cixuuz.github.io/post/interview-ds/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/interview-ds/</guid>
      <description>Probability/Statistics Questions 1. conditional probability 如何判断独立性？ 2. bayes rule problem: base rate fallacy
 sampling: bootstrap, reservoir
 A/B test, p value
 Poisson, Binomial以及Exponential queuing question: The most efficient way to queue is single line, multiple servers. It is efficient because: You don&amp;rsquo;t have servers being idle because their queue is empty even though others are full. You don&amp;rsquo;t have stalls in service due to a single customer being slow All customers wait approximately the same time.</description>
    </item>
    
    <item>
      <title>python pandas</title>
      <link>https://cixuuz.github.io/post/python-pandas/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/python-pandas/</guid>
      <description>aggragate in pandas https://pythonforbiologists.com/when-to-use-aggregatefiltertransform-in-pandas/</description>
    </item>
    
    <item>
      <title>JVM</title>
      <link>https://cixuuz.github.io/post/java-jvm/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-jvm/</guid>
      <description>make a JVM</description>
    </item>
    
    <item>
      <title>Path to Distributed System</title>
      <link>https://cixuuz.github.io/post/distributed_system/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/distributed_system/</guid>
      <description>Google papers(GFS/BigTable/Spanner/F1)
Consensus algorithms(Raft/Paxos)
Distributed computing sys (spark/dremel/presto)
newSql(tiDB)</description>
    </item>
    
    <item>
      <title>install spark</title>
      <link>https://cixuuz.github.io/post/spark-install/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/spark-install/</guid>
      <description>install spark https://www.davidadrian.cc/posts/2017/08/how-to-spark-cluster/</description>
    </item>
    
    <item>
      <title>newSQL</title>
      <link>https://cixuuz.github.io/post/sql-newsql/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/sql-newsql/</guid>
      <description>newSQL</description>
    </item>
    
    <item>
      <title>leetcode summary 09/18</title>
      <link>https://cixuuz.github.io/post/lcs_0918/</link>
      <pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0918/</guid>
      <description> 132. Palindrome Partitioning II  dp: current status[j] depends on previous status[0, i-1] + isPalidrom[i, j]   459. Repeated Substring Pattern  </description>
    </item>
    
    <item>
      <title>Performance_reviews</title>
      <link>https://cixuuz.github.io/post/performance_reviews/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/performance_reviews/</guid>
      <description>How do Individual Contributors Get Stuck?</description>
    </item>
    
    <item>
      <title>leetcode summary 09/15</title>
      <link>https://cixuuz.github.io/post/lcs_0915/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0915/</guid>
      <description> 131. Palindrome Partitioning  list all possible partitions and check can cache palindrome   </description>
    </item>
    
    <item>
      <title>leetcode summary 09/14</title>
      <link>https://cixuuz.github.io/post/lcs_0914/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0914/</guid>
      <description> 234. Palindrome Linked List  reverse half and compare then reverse back   5. Longest Palindromic Substring  9. Palindrome Number  125. Valid Palindrome  Character.isLetterOrDigit() StringBuilder.reverse() is mutable   214. Shortest Palindrome  brute force LTE small range when compare   </description>
    </item>
    
    <item>
      <title>Data Science Path</title>
      <link>https://cixuuz.github.io/post/ds_summary/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ds_summary/</guid>
      <description>Machine Learning Machine Learning Supervised Learning Classification (qualitative) K-NN Logistic Regression Neural Networks error analysis skewed data F1 score = 2PR/(P+R) accuracy precision recall learning curve SVM Kernal Parameters C sigma Regression (quantitative) Linear Regression validation sensitivity compactness Ensemble Learning decrease variance (bagging), bias (boosting), or improve predictions (stacking). The basic motivation of sequential methods is to exploit the dependence between the base learners. The basic motivation of parallel methods is to exploit independence between the base learners since the error can be reduced dramatically by averaging.</description>
    </item>
    
    <item>
      <title>Metrics selection</title>
      <link>https://cixuuz.github.io/post/ds_metrics/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ds_metrics/</guid>
      <description>Definitions  A type I error occurs when the null hypothesis (H0) is true, but is rejected. Also known as false positive, where positive means rejection of a null hypothesis.
 A type II error occurs when the null hypothesis is false, but erroneously fails to be rejected. Also called as false negative, where negative refers to retaining a null hypothesis.
 TPR (True Positive Rate) = # True positives / # positives = Recall = \( TP \over (TP+FN) \)</description>
    </item>
    
    <item>
      <title>leetcode summary 09/13</title>
      <link>https://cixuuz.github.io/post/lcs_0913/</link>
      <pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0913/</guid>
      <description> 409. Longest Palindrome  use as many as char in odds add 1 if any odd exists   479. Largest Palindrome Product  enumerate all situation from max to min   266. Palindrome Permutation  only one odd count   267. Palindrome Permutation II  </description>
    </item>
    
    <item>
      <title>leetcode summary 09/07</title>
      <link>https://cixuuz.github.io/post/lcs_0907/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0907/</guid>
      <description> 336. Palindrome Pairs  </description>
    </item>
    
    <item>
      <title>leetcode summary 09/06</title>
      <link>https://cixuuz.github.io/post/lcs_0906/</link>
      <pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0906/</guid>
      <description>517 Super Washing Machines  the least steps we need to eventually finish this process is determined by the peak of abs(cnt) (accumulative count of gain/lose array) and the max of &amp;ldquo;gain/lose&amp;rdquo; array. &amp;gt;For a single machine, necessary operations is to transfer dresses from one side to another until sum of both sides and itself reaches the average number. We can calculate (required dresses) - (contained dresses) of each side as L and R:   L &amp;gt; 0 &amp;amp;&amp;amp; R &amp;gt; 0: both sides lacks dresses, and we can only export one dress from current machines at a time, so result is abs(L) + abs&amp;reg; L &amp;lt; 0 &amp;amp;&amp;amp; R &amp;lt; 0: both sides contains too many dresses, and we can import dresses from both sides at the same time, so result is max(abs(L), abs&amp;reg;) L &amp;lt; 0 &amp;amp;&amp;amp; R &amp;gt; 0 or L &amp;gt;0 &amp;amp;&amp;amp; R &amp;lt; 0: the side with a larger absolute value will import/export its extra dresses from/to current machine or other side, so result is max(abs(L), abs&amp;reg;)</description>
    </item>
    
    <item>
      <title>Algorithm - leetcode</title>
      <link>https://cixuuz.github.io/post/algorithm-leetcode/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/algorithm-leetcode/</guid>
      <description>692. Top K Frequent Words 2017-10-15
682. Baseball Game 2017-09-23
677. Map Sum Pairs 2017-09-23
647. Palindromic Substrings 2017-09-06
566. Reshape the Matrix 2017-10-09
564. Find the Closest Palindrome 2017-09-06
532. K-diff Pairs in an Array 2017-09-04
529. Minesweepe 2017-09-06
518. Coin Change 2 2017-10-19
517. Super Washing Machines 2017-09-06
516. Longest Palindromic Subsequence 2017-09-05
508. Most Frequent Subtree Sum 2017-09-05
500. Keyboard Row 2017-10-09
479. Largest Palindrome Product 2017-09-13</description>
    </item>
    
    <item>
      <title>leetcode summary 09/05</title>
      <link>https://cixuuz.github.io/post/lcs_0905/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0905/</guid>
      <description> 516 Longest Palindromic Subsequence  O(2^n) Brute force. If the two ends of a string are the same, then they must be included in the longest palindrome subsequence. Otherwise, both ends cannot be included in the longest palindrome subsequence.
 O(n^2) memo the result from left to right. also rewrite in dp fashion 
  508 Most Frequent Subtree Sum  postOrder and check count   </description>
    </item>
    
    <item>
      <title>leetcode summary 09/04</title>
      <link>https://cixuuz.github.io/post/lcs_0904/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0904/</guid>
      <description> 532. K-diff Pairs in an Array  corner case, length less than 2 and negative k.  variant of two sum: O(1) space  </description>
    </item>
    
    <item>
      <title>leetcode summary 09/03</title>
      <link>https://cixuuz.github.io/post/lcs_0903/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0903/</guid>
      <description> 270. Closest Binary Search Tree Value  recursive: pass pre node value when null iterative: similar dfs   272. Closest Binary Search Tree Value II  inorder traverse all nodes and get k nearest   285. Inorder Successor in BST  read carefully   298. Binary Tree Longest Consecutive Sequence  dfs: pass parent value to children and compare values   333. Largest BST Subtree  construct a class to hold size, lower bound, upper bound go in bottom-up deal with leaves carefully, better use infinit   </description>
    </item>
    
    <item>
      <title>leetcode summary 09/02 (10)</title>
      <link>https://cixuuz.github.io/post/lcs_0902/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0902/</guid>
      <description>617. Merge Two Binary Trees  dfs   606. Construct String from Binary Tree  right can be omitted in some case   553. Optimal Division  math: x1 must be numerator and x2 must go to denominator.   545. Boundary of Binary Tree  wrong answer: [37,-34,-48,null,-100,-100,48,null,null,null,null,-54,null,-71,-22,null,null,null,8] [1] [0, null, 0, 0] neat solution of one traversal:  node.left is left bound if node is left bound; node.</description>
    </item>
    
    <item>
      <title>leetcode summary 09/01</title>
      <link>https://cixuuz.github.io/post/lcs_0901/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0901/</guid>
      <description> 662. Maximum Width of Binary Tree  iterative: save index of each node while queue nodes. recursive: dfs, keep a array of left most nodes.   640. Solve the Equation  corner cases:  &amp;ldquo;0x=0&amp;rdquo; &amp;ldquo;x=-x&amp;rdquo; &amp;ldquo;x=-1&amp;rdquo; &amp;ldquo;0x=-x&amp;rdquo;    </description>
    </item>
    
    <item>
      <title>Java::Comparator</title>
      <link>https://cixuuz.github.io/post/java-comparator/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-comparator/</guid>
      <description>做题的时候遇到了sort，想试试Java 8的新语法。于是有了一些研究：
Reference  Very confused by Java 8 Comparator type inference
 access field by lambda. intervals is a list of interval. intervals.sort(Comparator.comparingInt((Interval i) -&amp;gt; i.start));
  Comparator.comparing((Person p)-&amp;gt;p.firstName) .thenComparing(p-&amp;gt;p.lastName) .thenComparingInt(p-&amp;gt;p.age);
Comparator.comparing(Person::getFirstName) .thenComparing(Person::getLastName) .thenComparingInt(Person::getAge);
@Override public int compareTo(Person o){ return Comparator.comparing(Person::getFirstName) .thenComparing(Person::getLastName) .thenComparingInt(Person::getAge) .compare(this, o); }
reference: https://dzone.com/articles/java-8-comparator-how-to-sort-a-list</description>
    </item>
    
    <item>
      <title>leetcode summary 08/29</title>
      <link>https://cixuuz.github.io/post/lcs_0829/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0829/</guid>
      <description>107. Binary Tree Level Order Traversal II  use element as index to record whether visit   117. Populating Next Right Pointers in Each Node II  child connected and be used for next level   646 Maximum Length of Pair Chain  DP: pairs[i][0] &amp;gt; pairs[j][1]? dp[j] + 1 : dp[j] greedy: for end point z, if all intervals where end point &amp;lt; z, there is no possible to get a longer chain based on previous intervals.</description>
    </item>
    
    <item>
      <title>leetcode summary 08/28</title>
      <link>https://cixuuz.github.io/post/lcs_0828/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0828/</guid>
      <description> 107. Binary Tree Level Order Traversal II  645. Set Mismatch  use element as index to record whether visit   </description>
    </item>
    
    <item>
      <title>leetcode summary 08/27</title>
      <link>https://cixuuz.github.io/post/lcs_0827/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0827/</guid>
      <description>51. N-Queens  dfs: each recursion check with previous rows quick check: using a boolean array to record if current location is conflicts with elements in col, \ and / bit mask:  set i to 1: a |= (1 &amp;lt;&amp;lt; i) set i to 0: a &amp;amp;= ~(1 &amp;lt;&amp;lt; i) inverse i: a ^= (1 &amp;lt;&amp;lt; i) get i: (a &amp;gt;&amp;gt; i) &amp;amp; 1 find last 1: a &amp;amp; -a    52.</description>
    </item>
    
    <item>
      <title>Core Java 读书笔记</title>
      <link>https://cixuuz.github.io/post/java-tutorial/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-tutorial/</guid>
      <description>http://docs.oracle.com/javase/tutorial/ Core Java
Ch4 Objects and Classes 4.1 Introduction to Object-Oriented Programming  Encapsulation: The key to making encapsulation work is to have methods never directly access instance fields in a class other than their own.  4.2 Using Predefined Classes  an object variable doesn’t actually contain an object. It only refers to an object.  4.3 Defining Your Own Classes, page 145 4.4 Static Fields and Methods, page 158 4.</description>
    </item>
    
    <item>
      <title>leetcode summary 08/24</title>
      <link>https://cixuuz.github.io/post/lcs_0824/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0824/</guid>
      <description> 250. Count Univalue Subtrees tc: O(n) sc: O(n)
terminal case: null -&amp;gt; True every node: whether left subtree equals val, and right subtree equals val. Only true, count + 1. refer
 </description>
    </item>
    
    <item>
      <title>leetcode summary 08/23</title>
      <link>https://cixuuz.github.io/post/lcs_0823/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0823/</guid>
      <description>337. House Robber III  basic: for each node, you can choose rob or not, based on the parent&amp;rsquo;s status. return max amount of each choice. dp: keep previous rob information.   95. Unique Binary Search Trees II  foreach 1 to n, generate left and right subtree and combine with current node.   111. Minimum Depth of Binary Tree  its root to leaf, not to other node.</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://cixuuz.github.io/post/resume/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/resume/</guid>
      <description>你面试的时候可以解释说一下如何scale 整个性能瓶颈会出现哪里？如何解决？
Professional Experience Data Engineer, 7Chord, New York Jan 2017 – Sep 2017 • Designed and built near real time data ETL pipeline scheduled by Airflow, which streams 10GB data from 10 different data source Distributed web crawler with Scrapy • Predicted signal of bond trading by ensemble learning • Visualized machine learning results by d3.js
https://www.confluent.io/blog/stream-data-platform-1/
Data Analyst, Uber Beijing, China Jan 2015 – Dec 2015 • Optimized, and Maintained ETL pipelines • Detected drivers’ or customers’ fraud behaviors by PCA, which reduced detection time by 50%, and increased accuracy to 90%</description>
    </item>
    
    <item>
      <title>title</title>
      <link>https://cixuuz.github.io/post/java-pass-by-value/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-pass-by-value/</guid>
      <description>java 传值还是引用 refer Java is always pass-by-value. Unfortunately, they decided to call the location of an object a &amp;ldquo;reference&amp;rdquo;. When we pass the value of an object, we are passing the reference to it.</description>
    </item>
    
    <item>
      <title>leetcode summary 08/22</title>
      <link>https://cixuuz.github.io/post/lcs_0822/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0822/</guid>
      <description>114. Flatten Binary Tree to Linked List  iterative: set left tree to the right child, left child is null, then go to next right node. recursive: use post order get successor of each node, set successor to each node&amp;rsquo;r right child   199. Binary Tree Right Side View  iterative: BFS, always pop rightmost node. It&amp;rsquo;s better using queue, and loop N times. N is the size of queue.</description>
    </item>
    
    <item>
      <title>Notes of Readings in Database Systems</title>
      <link>https://cixuuz.github.io/post/readings_in_database_systems/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/readings_in_database_systems/</guid>
      <description>redbook
Preface Background introduced by Michael Stonebraker Traditional RDBMS Systems introduced by Michael Stonebraker Techniques Everyone Should Know introduced by Peter Bailis New DBMS Architectures introduced by Michael Stonebraker [HTML] [PDF] Large-Scale Dataflow Engines introduced by Peter Bailis [HTML] [PDF] Weak Isolation and Distribution introduced by Peter Bailis [HTML] [PDF] Query Optimization introduced by Joe Hellerstein [HTML] [PDF] Interactive Analytics introduced by Joe Hellerstein [HTML] [PDF] Languages introduced by Joe Hellerstein [HTML] [PDF] Web Data introduced by Peter Bailis [HTML] [PDF] A Biased Take on a Moving Target: Complex Analytics by Michael Stonebraker [HTML] [PDF] A Biased Take on a Moving Target: Data Integration by Michael Stonebraker</description>
    </item>
    
    <item>
      <title>Python Numpy</title>
      <link>https://cixuuz.github.io/post/python-numpy/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/python-numpy/</guid>
      <description> 在 Numpy 中, 创建 2D Array 的默认方式是 &amp;ldquo;C-type&amp;rdquo; 以 row 为主在内存中排列, 而如果是 &amp;ldquo;Fortran&amp;rdquo; 的方式创建的, 就是以 column 为主在内存中排列.
col_major = np.zeros((10,10), order=&#39;C&#39;) # C-type row_major = np.zeros((10,10), order=&#39;F&#39;) # Fortran  copy慢 view快 same as np.flatten() return new copy 或者 np.ravel() return new view
  </description>
    </item>
    
    <item>
      <title>bigtable and leveldb</title>
      <link>https://cixuuz.github.io/post/database-bigtable-leveldb/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/database-bigtable-leveldb/</guid>
      <description>浅析 Bigtable 和 LevelDB 的实现</description>
    </item>
    
    <item>
      <title>Kafka message format</title>
      <link>https://cixuuz.github.io/post/kafka-message-format/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/kafka-message-format/</guid>
      <description>Apache Kafka消息格式</description>
    </item>
    
    <item>
      <title>Kafka stream</title>
      <link>https://cixuuz.github.io/post/kafka-stream/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/kafka-stream/</guid>
      <description>kafka stream</description>
    </item>
    
    <item>
      <title>MySQL 架构</title>
      <link>https://cixuuz.github.io/post/mysql-high-availability/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/mysql-high-availability/</guid>
      <description>refer
高可用架构 MySQL高可用方面，目前业界主流依然是基于异步复制的技术，例如Keepalived、MHA、ZooKeeper等，要求数据强一致的场景逐步开始使用分布式协议，这方面的典型代表有PXC、Group Replication、TiDB。下面我们就重点来说说keepalived、MHA和PXC这几种大家用得比较多的架构。
 脑裂 （ 一种常见的脑裂情况可以描述如下）比如正常情况下，（集群中的）NodeA 和 NodeB 会通过心跳检测以确认对方存在，在通过心跳检测确认不到对方存在时，就接管对应的（共享） resource 。如果突然间，NodeA 和 NodeB 之间的心跳不存在了（如网络断开），而 NodeA 和 NodeB 事实上却都处于 Active 状态，此时 NodeA 要接管 NodeB 的 resource ，同时 NodeB 要接管 NodeA 的 resource ，这时就是脑裂（split-brain）。   双Master架构：非常成熟，使用很普遍，要注意延迟和数据的一致性。 PXC: 分布式协议，数据强一致性，并发效率略低，可用性好 MHA：各项指标介于M-M和PXC之间，性能无损失，适合读写分离架构。  MySQL sharding拆分 分库(垂直),　分表(水平)的取舍</description>
    </item>
    
    <item>
      <title>database index</title>
      <link>https://cixuuz.github.io/post/database-index/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/database-index/</guid>
      <description>数据库索引与事务管理
B+ tree B+树是n叉排序树
hash index MySQL: innoDB以及MyISAM引擎，均不支持Hash索引</description>
    </item>
    
    <item>
      <title>javascript es6</title>
      <link>https://cixuuz.github.io/post/js-es6/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/js-es6/</guid>
      <description>ES6
 let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。
var a = []; for (let i = 0; i &amp;lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 6  const用来声明常量。一旦声明，常量的值就不能改变。
const monent = require(&#39;moment&#39;)  arrow function
class Animal { constructor(){ this.type = &#39;animal&#39; } says(say){ setTimeout( () =&amp;gt; { console.log(this.type + &#39; says &#39; + say) }, 1000) } } var animal = new Animal() animal.says(&#39;hi&#39;) //animal says hi   </description>
    </item>
    
    <item>
      <title>spark 内存管理</title>
      <link>https://cixuuz.github.io/post/spark-memory-management/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/spark-memory-management/</guid>
      <description>Spark 内存管理的前世今生（上） Spark 内存管理的前世今生（下）</description>
    </item>
    
    <item>
      <title>statistical learning</title>
      <link>https://cixuuz.github.io/post/statistical-learning/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/statistical-learning/</guid>
      <description>Statistical Learning Videos Book: Fundamentals of Modern Statistical Methods: Substantially Improving Power and Accuracy
Supervised Learning Regression and classification is classified by its output types. Regression when we predict quantitative outputs, and clas- siﬁcation when we predict qualitative outputs.
 Least squares assumes f(x) is well approximated by a globally linear function. k-nearest neighbors assumes f(x) is well approximated by a locally constant function.
 One fact should be clear by now.</description>
    </item>
    
    <item>
      <title>lcs 08/15</title>
      <link>https://cixuuz.github.io/post/lcs_0815/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0815/</guid>
      <description>99. Recover Binary Search Tree  travese in order. The result should be sorted ascending. The misplaced larger element will be close to head, while the smaller one will be close to end. For example, 1 2 3 is the in order. But the wrong seq is like 3 2 1. Apparently, 3 &amp;gt; 2 so 3 is the first node. 2 &amp;gt; 1, so 1 is the second one.</description>
    </item>
    
    <item>
      <title>lcs 08/13</title>
      <link>https://cixuuz.github.io/post/lcs_0813/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0813/</guid>
      <description>99. Recover Binary Search Tree  travese in order. The result should be sorted ascending. The misplaced larger element will be close to head, while the smaller one will be close to end. For example, 1 2 3 is the in order. But the wrong seq is like 3 2 1. Apparently, 3 &amp;gt; 2 so 3 is the first node. 2 &amp;gt; 1, so 1 is the second one.</description>
    </item>
    
    <item>
      <title>lcs 08/12</title>
      <link>https://cixuuz.github.io/post/lcs_0812/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0812/</guid>
      <description>297. Serialize and Deserialize Binary Tree  deque inherits from linkedlist(collection). represent separator and null as a String. string and char are not same. append complete subtree ex &amp;ldquo;1,null,null,&amp;rdquo;   105. Construct Binary Tree from Preorder and Inorder Traversal  recursive solution is straightforward. The only thing is that jump idx to find right start in inorder array. To speed up, we can cache inorder and index in the front.</description>
    </item>
    
    <item>
      <title>leetcode 102</title>
      <link>https://cixuuz.github.io/post/lc_102/</link>
      <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_102/</guid>
      <description>4. Median of Two Sorted Arrays Pure math. Median definition is the median is used for dividing a set into two equal length subsets, that one subset is always greater than the other.
102. Binary Tree Level Order Traversal  The best way to to iterate tree level by level is to use for loop in Java. (BFS) return null is not same as return; (empty)  public class Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(TreeNode root) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new LinkedList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;(); Queue&amp;lt;TreeNode&amp;gt; q = new LinkedList&amp;lt;TreeNode&amp;gt;(); if (root == null) return res; q.</description>
    </item>
    
    <item>
      <title>175. Combine Two Tables</title>
      <link>https://cixuuz.github.io/post/lc_175/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_175/</guid>
      <description> 175. Combine Two Tables
Solution select FirstName, LastName, City, State from person left join address on person.personid = address.personid;
Summary </description>
    </item>
    
    <item>
      <title>176. Second Highest Salary</title>
      <link>https://cixuuz.github.io/post/lc_176/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_176/</guid>
      <description>176. Second Highest Salary
Solution select (select salary from employee group by salary order by salary desc limit 1 offset 1) as SecondHighestSalary;
Summary There is a trick to print null when result is empty.</description>
    </item>
    
    <item>
      <title>177. Nth Highest Salary</title>
      <link>https://cixuuz.github.io/post/lc_177/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_177/</guid>
      <description>177. Nth Highest Salary
Solution CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN declare m int; set m = N - 1; RETURN ( # Write your MySQL query statement below. select distinct salary from Employee order by salary desc limit 1 offset m ); END
Summary The LIMIT clause can be used to constrain the number of rows returned by the SELECT statement. LIMIT takes one or two numeric arguments, which must both be nonnegative integer constants (except when using prepared statements).</description>
    </item>
    
    <item>
      <title>178. Rank Scores</title>
      <link>https://cixuuz.github.io/post/lc_178/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_178/</guid>
      <description> 178. Rank Scores
Solution 1 SELECT Score, @rank := @rank + (@prev &amp;lt;&amp;gt; (@prev := Score)) Rank FROM Scores, (SELECT @rank := 0, @prev := -1) init ORDER BY Score desc
solution 2 SELECT Score, (SELECT COUNT(DISTINCT Score) FROM Scores as s1 WHERE s1.Score &amp;gt;= s2.Score) As rank FROM Scores as s2 ORDER BY rank;
一直不知道还能这么嵌套写法
Summary </description>
    </item>
    
    <item>
      <title>178. Rank Scores</title>
      <link>https://cixuuz.github.io/post/lc_180/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_180/</guid>
      <description> 178. Rank Scores
Solution 1 SELECT Score, @rank := @rank + (@prev &amp;lt;&amp;gt; (@prev := Score)) Rank FROM Scores, (SELECT @rank := 0, @prev := -1) init ORDER BY Score desc
solution 2 SELECT Score, (SELECT COUNT(DISTINCT Score) FROM Scores as s1 WHERE s1.Score &amp;gt;= s2.Score) As rank FROM Scores as s2 ORDER BY rank;
一直不知道还能这么嵌套写法
Summary </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/airflow_config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/airflow_config/</guid>
      <description>enter instance setting up python environment sudo apt-get update
sudo apt-get install python3-pip
sudo apt-get install build-essential libssl-dev libffi-dev python-dev
sudo apt-get install -y python3-venv
alias py3=&amp;lsquo;source /home/ubuntu/py_envs/py3/bin/activate&amp;rsquo;
setting airflow export AIRFLOW_HOME=~/nfs/airflow
python3 -m venv py_envs/py3 pip install &amp;ldquo;airflow[celery, crypto, mysql, password, s3, postgres, slack]&amp;rdquo;
call this command many times, until it says it&amp;rsquo;s not installed pip uninstall librabbitmq
https://github.com/celery/celery/issues/3675
rabbitmq slack https://slack.com/api/oauth.access?client_id=4b39e9-752c4&amp;amp;client_secret=33fea0113f5b1&amp;amp;code=ccdaa72ad</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/ds-jd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ds-jd/</guid>
      <description>PhD in Computer Science, Computational Linguistics, or related field preferred, or Master’s degree with 2+ years’ of relevant industry experience Proficient programming skills in a high-level language (e.g. Java, Scala, Python, C/C++, Perl, Matlab, R) Experience with statistical data analysis, experimental design, and hypotheses validation Familiarity with probabilistic models and an understanding of the mathematical concepts underlying machine learning methods Project-based experience with some of the following tools: Applied machine learning (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/ds-suggest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ds-suggest/</guid>
      <description>Strictly speaking, there is no such thing as &amp;ldquo;data science&amp;rdquo; (see What is data science and what is it not? ). See also: Vardi, Science has only two legs: http://portal.acm.org/ft_gateway...
Here are some resources I&amp;rsquo;ve collected about working with data, I hope you find them useful (note: I&amp;rsquo;m an undergrad student, this is not an expert opinion in any way).
1) Learn about matrix factorizations
Take the Computational Linear Algebra course (it is sometimes called Applied Linear Algebra or Matrix Computations or Numerical Analysis or Matrix Analysis and it can be either CS or Applied Math course).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/vis-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/vis-summary/</guid>
      <description>https://www.youtube.com/watch?v=QyhqzaMiFxk&amp;amp;list=PLQVvvaa0QuDfefDfXb9Yf0la1fPDKluPF&amp;amp;index=7
d3: http://d3.decembercafe.org/pages/lessons/10.html</description>
    </item>
    
  </channel>
</rss>