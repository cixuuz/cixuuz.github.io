<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chen Tong</title>
    <link>https://cixuuz.github.io/post/</link>
    <description>Recent content in Posts on Chen Tong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cixuuz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java::Comparator</title>
      <link>https://cixuuz.github.io/post/java-comparator/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-comparator/</guid>
      <description> 做题的时候遇到了sort，想试试Java 8的新语法。于是有了一些研究：
Reference  Very confused by Java 8 Comparator type inference
   </description>
    </item>
    
    <item>
      <title>leetcode summary 08/29</title>
      <link>https://cixuuz.github.io/post/lcs_0829/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0829/</guid>
      <description>107. Binary Tree Level Order Traversal II  use element as index to record whether visit   117. Populating Next Right Pointers in Each Node II  child connected and be used for next level   646 Maximum Length of Pair Chain  DP: pairs[i][0] &amp;gt; pairs[j][1]? dp[j] + 1 : dp[j] greedy: for end point z, if all intervals where end point &amp;lt; z, there is no possible to get a longer chain based on previous intervals.</description>
    </item>
    
    <item>
      <title>leetcode summary 08/28</title>
      <link>https://cixuuz.github.io/post/lcs_0828/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0828/</guid>
      <description> 107. Binary Tree Level Order Traversal II  645. Set Mismatch  use element as index to record whether visit   </description>
    </item>
    
    <item>
      <title>leetcode summary 08/27</title>
      <link>https://cixuuz.github.io/post/lcs_0827/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0827/</guid>
      <description>51. N-Queens  dfs: each recursion check with previous rows quick check: using a boolean array to record if current location is conflicts with elements in col, \ and / bit mask:  set i to 1: a |= (1 &amp;lt;&amp;lt; i) set i to 0: a &amp;amp;= ~(1 &amp;lt;&amp;lt; i) inverse i: a ^= (1 &amp;lt;&amp;lt; i) get i: (a &amp;gt;&amp;gt; i) &amp;amp; 1 find last 1: a &amp;amp; -a    52.</description>
    </item>
    
    <item>
      <title>Core Java 读书笔记</title>
      <link>https://cixuuz.github.io/post/java-tutorial/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-tutorial/</guid>
      <description>http://docs.oracle.com/javase/tutorial/ Core Java
Ch4 Objects and Classes 4.1 Introduction to Object-Oriented Programming  Encapsulation: The key to making encapsulation work is to have methods never directly access instance fields in a class other than their own.  4.2 Using Predefined Classes  an object variable doesn’t actually contain an object. It only refers to an object.  4.3 Defining Your Own Classes, page 145 4.4 Static Fields and Methods, page 158 4.</description>
    </item>
    
    <item>
      <title>leetcode summary 08/24</title>
      <link>https://cixuuz.github.io/post/lcs_0824/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0824/</guid>
      <description> 250. Count Univalue Subtrees tc: O(n) sc: O(n)
terminal case: null -&amp;gt; True every node: whether left subtree equals val, and right subtree equals val. Only true, count + 1. refer
 </description>
    </item>
    
    <item>
      <title>leetcode summary 08/23</title>
      <link>https://cixuuz.github.io/post/lcs_0823/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0823/</guid>
      <description>337. House Robber III  basic: for each node, you can choose rob or not, based on the parent&amp;rsquo;s status. return max amount of each choice. dp: keep previous rob information.   95. Unique Binary Search Trees II  foreach 1 to n, generate left and right subtree and combine with current node.   111. Minimum Depth of Binary Tree  its root to leaf, not to other node.</description>
    </item>
    
    <item>
      <title>resume</title>
      <link>https://cixuuz.github.io/post/resume/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/resume/</guid>
      <description>你面试的时候可以解释说一下如何scale 整个性能瓶颈会出现哪里？如何解决？
Professional Experience Data Engineer, 7Chord, New York Jan 2017 – Sep 2017 • Designed and built near real time data ETL pipeline scheduled by Airflow, which streams 10GB data from 10 different data source Distributed web crawler with Scrapy • Predicted signal of bond trading by ensemble learning • Visualized machine learning results by d3.js
https://www.confluent.io/blog/stream-data-platform-1/
Data Analyst, Uber Beijing, China Jan 2015 – Dec 2015 • Optimized, and Maintained ETL pipelines • Detected drivers’ or customers’ fraud behaviors by PCA, which reduced detection time by 50%, and increased accuracy to 90%</description>
    </item>
    
    <item>
      <title>title</title>
      <link>https://cixuuz.github.io/post/java-pass-by-value/</link>
      <pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/java-pass-by-value/</guid>
      <description>java 传值还是引用 refer Java is always pass-by-value. Unfortunately, they decided to call the location of an object a &amp;ldquo;reference&amp;rdquo;. When we pass the value of an object, we are passing the reference to it.</description>
    </item>
    
    <item>
      <title>leetcode summary 08/22</title>
      <link>https://cixuuz.github.io/post/lcs_0822/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0822/</guid>
      <description>114. Flatten Binary Tree to Linked List  iterative: set left tree to the right child, left child is null, then go to next right node. recursive: use post order get successor of each node, set successor to each node&amp;rsquo;r right child   199. Binary Tree Right Side View  iterative: BFS, always pop rightmost node. It&amp;rsquo;s better using queue, and loop N times. N is the size of queue.</description>
    </item>
    
    <item>
      <title>Notes of Readings in Database Systems</title>
      <link>https://cixuuz.github.io/post/readings_in_database_systems/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/readings_in_database_systems/</guid>
      <description>redbook
Preface Background introduced by Michael Stonebraker Traditional RDBMS Systems introduced by Michael Stonebraker Techniques Everyone Should Know introduced by Peter Bailis New DBMS Architectures introduced by Michael Stonebraker [HTML] [PDF] Large-Scale Dataflow Engines introduced by Peter Bailis [HTML] [PDF] Weak Isolation and Distribution introduced by Peter Bailis [HTML] [PDF] Query Optimization introduced by Joe Hellerstein [HTML] [PDF] Interactive Analytics introduced by Joe Hellerstein [HTML] [PDF] Languages introduced by Joe Hellerstein [HTML] [PDF] Web Data introduced by Peter Bailis [HTML] [PDF] A Biased Take on a Moving Target: Complex Analytics by Michael Stonebraker [HTML] [PDF] A Biased Take on a Moving Target: Data Integration by Michael Stonebraker</description>
    </item>
    
    <item>
      <title>Python Numpy</title>
      <link>https://cixuuz.github.io/post/python-numpy/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/python-numpy/</guid>
      <description> 在 Numpy 中, 创建 2D Array 的默认方式是 &amp;ldquo;C-type&amp;rdquo; 以 row 为主在内存中排列, 而如果是 &amp;ldquo;Fortran&amp;rdquo; 的方式创建的, 就是以 column 为主在内存中排列.
col_major = np.zeros((10,10), order=&#39;C&#39;) # C-type row_major = np.zeros((10,10), order=&#39;F&#39;) # Fortran  copy慢 view快 same as np.flatten() return new copy 或者 np.ravel() return new view
  </description>
    </item>
    
    <item>
      <title>bigtable and leveldb</title>
      <link>https://cixuuz.github.io/post/database-bigtable-leveldb/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/database-bigtable-leveldb/</guid>
      <description>浅析 Bigtable 和 LevelDB 的实现</description>
    </item>
    
    <item>
      <title>Kafka message format</title>
      <link>https://cixuuz.github.io/post/kafka-message-format/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/kafka-message-format/</guid>
      <description>Apache Kafka消息格式</description>
    </item>
    
    <item>
      <title>Kafka stream</title>
      <link>https://cixuuz.github.io/post/kafka-stream/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/kafka-stream/</guid>
      <description>kafka stream</description>
    </item>
    
    <item>
      <title>MySQL 架构</title>
      <link>https://cixuuz.github.io/post/mysql-high-availability/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/mysql-high-availability/</guid>
      <description>refer
高可用架构 MySQL高可用方面，目前业界主流依然是基于异步复制的技术，例如Keepalived、MHA、ZooKeeper等，要求数据强一致的场景逐步开始使用分布式协议，这方面的典型代表有PXC、Group Replication、TiDB。下面我们就重点来说说keepalived、MHA和PXC这几种大家用得比较多的架构。
 脑裂 （ 一种常见的脑裂情况可以描述如下）比如正常情况下，（集群中的）NodeA 和 NodeB 会通过心跳检测以确认对方存在，在通过心跳检测确认不到对方存在时，就接管对应的（共享） resource 。如果突然间，NodeA 和 NodeB 之间的心跳不存在了（如网络断开），而 NodeA 和 NodeB 事实上却都处于 Active 状态，此时 NodeA 要接管 NodeB 的 resource ，同时 NodeB 要接管 NodeA 的 resource ，这时就是脑裂（split-brain）。   双Master架构：非常成熟，使用很普遍，要注意延迟和数据的一致性。 PXC: 分布式协议，数据强一致性，并发效率略低，可用性好 MHA：各项指标介于M-M和PXC之间，性能无损失，适合读写分离架构。  MySQL sharding拆分 分库(垂直),　分表(水平)的取舍</description>
    </item>
    
    <item>
      <title>database index</title>
      <link>https://cixuuz.github.io/post/database-index/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/database-index/</guid>
      <description>数据库索引与事务管理
B+ tree B+树是n叉排序树
hash index MySQL: innoDB以及MyISAM引擎，均不支持Hash索引</description>
    </item>
    
    <item>
      <title>javascript es6</title>
      <link>https://cixuuz.github.io/post/js-es6/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/js-es6/</guid>
      <description>ES6
 let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。
var a = []; for (let i = 0; i &amp;lt; 10; i++) { a[i] = function () { console.log(i); }; } a[6](); // 6  const用来声明常量。一旦声明，常量的值就不能改变。
const monent = require(&#39;moment&#39;)  arrow function
class Animal { constructor(){ this.type = &#39;animal&#39; } says(say){ setTimeout( () =&amp;gt; { console.log(this.type + &#39; says &#39; + say) }, 1000) } } var animal = new Animal() animal.says(&#39;hi&#39;) //animal says hi   </description>
    </item>
    
    <item>
      <title>spark 内存管理</title>
      <link>https://cixuuz.github.io/post/spark-memory-management/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/spark-memory-management/</guid>
      <description>Spark 内存管理的前世今生（上） Spark 内存管理的前世今生（下）</description>
    </item>
    
    <item>
      <title>statistical learning</title>
      <link>https://cixuuz.github.io/post/statistical-learning/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/statistical-learning/</guid>
      <description>Statistical Learning Videos Book: Fundamentals of Modern Statistical Methods: Substantially Improving Power and Accuracy
Supervised Learning Regression and classification is classified by its output types. Regression when we predict quantitative outputs, and clas- siﬁcation when we predict qualitative outputs.
 Least squares assumes f(x) is well approximated by a globally linear function. k-nearest neighbors assumes f(x) is well approximated by a locally constant function.
 One fact should be clear by now.</description>
    </item>
    
    <item>
      <title>lcs 08/15</title>
      <link>https://cixuuz.github.io/post/lcs_0815/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0815/</guid>
      <description>99. Recover Binary Search Tree  travese in order. The result should be sorted ascending. The misplaced larger element will be close to head, while the smaller one will be close to end. For example, 1 2 3 is the in order. But the wrong seq is like 3 2 1. Apparently, 3 &amp;gt; 2 so 3 is the first node. 2 &amp;gt; 1, so 1 is the second one.</description>
    </item>
    
    <item>
      <title>lcs 08/13</title>
      <link>https://cixuuz.github.io/post/lcs_0813/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0813/</guid>
      <description>99. Recover Binary Search Tree  travese in order. The result should be sorted ascending. The misplaced larger element will be close to head, while the smaller one will be close to end. For example, 1 2 3 is the in order. But the wrong seq is like 3 2 1. Apparently, 3 &amp;gt; 2 so 3 is the first node. 2 &amp;gt; 1, so 1 is the second one.</description>
    </item>
    
    <item>
      <title>lcs 08/12</title>
      <link>https://cixuuz.github.io/post/lcs_0812/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lcs_0812/</guid>
      <description>297. Serialize and Deserialize Binary Tree  deque inherits from linkedlist(collection). represent separator and null as a String. string and char are not same. append complete subtree ex &amp;ldquo;1,null,null,&amp;rdquo;   105. Construct Binary Tree from Preorder and Inorder Traversal  recursive solution is straightforward. The only thing is that jump idx to find right start in inorder array. To speed up, we can cache inorder and index in the front.</description>
    </item>
    
    <item>
      <title>leetcode 102</title>
      <link>https://cixuuz.github.io/post/lc_102/</link>
      <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_102/</guid>
      <description>4. Median of Two Sorted Arrays Pure math. Median definition is the median is used for dividing a set into two equal length subsets, that one subset is always greater than the other.
102. Binary Tree Level Order Traversal  The best way to to iterate tree level by level is to use for loop in Java. (BFS) return null is not same as return; (empty)  public class Solution { public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; levelOrder(TreeNode root) { List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new LinkedList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;(); Queue&amp;lt;TreeNode&amp;gt; q = new LinkedList&amp;lt;TreeNode&amp;gt;(); if (root == null) return res; q.</description>
    </item>
    
    <item>
      <title>175. Combine Two Tables</title>
      <link>https://cixuuz.github.io/post/lc_175/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_175/</guid>
      <description> 175. Combine Two Tables
Solution select FirstName, LastName, City, State from person left join address on person.personid = address.personid;
Summary </description>
    </item>
    
    <item>
      <title>176. Second Highest Salary</title>
      <link>https://cixuuz.github.io/post/lc_176/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_176/</guid>
      <description>176. Second Highest Salary
Solution select (select salary from employee group by salary order by salary desc limit 1 offset 1) as SecondHighestSalary;
Summary There is a trick to print null when result is empty.</description>
    </item>
    
    <item>
      <title>177. Nth Highest Salary</title>
      <link>https://cixuuz.github.io/post/lc_177/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_177/</guid>
      <description>177. Nth Highest Salary
Solution CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN declare m int; set m = N - 1; RETURN ( # Write your MySQL query statement below. select distinct salary from Employee order by salary desc limit 1 offset m ); END
Summary The LIMIT clause can be used to constrain the number of rows returned by the SELECT statement. LIMIT takes one or two numeric arguments, which must both be nonnegative integer constants (except when using prepared statements).</description>
    </item>
    
    <item>
      <title>178. Rank Scores</title>
      <link>https://cixuuz.github.io/post/lc_178/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_178/</guid>
      <description> 178. Rank Scores
Solution 1 SELECT Score, @rank := @rank + (@prev &amp;lt;&amp;gt; (@prev := Score)) Rank FROM Scores, (SELECT @rank := 0, @prev := -1) init ORDER BY Score desc
solution 2 SELECT Score, (SELECT COUNT(DISTINCT Score) FROM Scores as s1 WHERE s1.Score &amp;gt;= s2.Score) As rank FROM Scores as s2 ORDER BY rank;
一直不知道还能这么嵌套写法
Summary </description>
    </item>
    
    <item>
      <title>178. Rank Scores</title>
      <link>https://cixuuz.github.io/post/lc_180/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/lc_180/</guid>
      <description> 178. Rank Scores
Solution 1 SELECT Score, @rank := @rank + (@prev &amp;lt;&amp;gt; (@prev := Score)) Rank FROM Scores, (SELECT @rank := 0, @prev := -1) init ORDER BY Score desc
solution 2 SELECT Score, (SELECT COUNT(DISTINCT Score) FROM Scores as s1 WHERE s1.Score &amp;gt;= s2.Score) As rank FROM Scores as s2 ORDER BY rank;
一直不知道还能这么嵌套写法
Summary </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/airflow_config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/airflow_config/</guid>
      <description>enter instance setting up python environment sudo apt-get update
sudo apt-get install python3-pip
sudo apt-get install build-essential libssl-dev libffi-dev python-dev
sudo apt-get install -y python3-venv
alias py3=&amp;lsquo;source /home/ubuntu/py_envs/py3/bin/activate&amp;rsquo;
setting airflow export AIRFLOW_HOME=~/nfs/airflow
python3 -m venv py_envs/py3 pip install &amp;ldquo;airflow[celery, crypto, mysql, password, s3, postgres, slack]&amp;rdquo;
call this command many times, until it says it&amp;rsquo;s not installed pip uninstall librabbitmq
https://github.com/celery/celery/issues/3675
rabbitmq slack https://slack.com/api/oauth.access?client_id=4b39e9-752c4&amp;amp;client_secret=33fea0113f5b1&amp;amp;code=ccdaa72ad</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/ds-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/ds-summary/</guid>
      <description>Strictly speaking, there is no such thing as &amp;ldquo;data science&amp;rdquo; (see What is data science and what is it not? ). See also: Vardi, Science has only two legs: http://portal.acm.org/ft_gateway...
Here are some resources I&amp;rsquo;ve collected about working with data, I hope you find them useful (note: I&amp;rsquo;m an undergrad student, this is not an expert opinion in any way).
1) Learn about matrix factorizations
Take the Computational Linear Algebra course (it is sometimes called Applied Linear Algebra or Matrix Computations or Numerical Analysis or Matrix Analysis and it can be either CS or Applied Math course).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cixuuz.github.io/post/vis-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cixuuz.github.io/post/vis-summary/</guid>
      <description>https://www.youtube.com/watch?v=QyhqzaMiFxk&amp;amp;list=PLQVvvaa0QuDfefDfXb9Yf0la1fPDKluPF&amp;amp;index=7
d3: http://d3.decembercafe.org/pages/lessons/10.html</description>
    </item>
    
  </channel>
</rss>